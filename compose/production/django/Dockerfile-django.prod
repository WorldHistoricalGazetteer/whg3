FROM --platform=linux/amd64 python:3.10.7-slim-bullseye

LABEL maintainer="WHC @ Pitt"

ENV PYTHONUNBUFFERED 1
ENV PYTHONDONTWRITEBYTECODE 1
ENV MAX_MAP_COUNT 262144

# Create user and group (1000 matches whgadmin in ubuntu)
ARG WHGADMIN_PASSWORD
RUN groupadd whgadmin && \
    useradd -rm -d /home/whgadmin -g whgadmin -s /bin/bash \
    -G sudo -u 1000 whgadmin -p "$(openssl passwd -1 $WHGADMIN_PASSWORD)"

EXPOSE 8003

# Install necessary packages
RUN apt-get update && \
    apt-get install -y lsb-release curl gnupg2 && \
    echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list && \
    curl -sSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \
    apt-get update && \
    apt-get install -y build-essential python3-gdal libpq-dev sudo nano locate curl redis-server postgresql-15 postgis wget && \
    wget https://github.com/wal-g/wal-g/releases/download/v3.0.2/wal-g-pg-ubuntu-20.04-amd64.tar.gz && \
    tar -zxvf wal-g-pg-ubuntu-20.04-amd64.tar.gz && \
    mv wal-g-pg-ubuntu-20.04-amd64 /usr/local/bin/wal-g && \
    rm wal-g-pg-ubuntu-20.04-amd64.tar.gz && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Create necessary directories and set permissions
RUN mkdir -p /app/static /etc/wal-g && \
    chown -R whgadmin:whgadmin /app/static

# Copy Google Cloud Services authentication file to container
COPY ./whg/authorisation/whg-backup-430708-e33f94999eab.json /etc/wal-g/gcs-credentials.json
RUN chown whgadmin:root /etc/wal-g/gcs-credentials.json

# Set up Python environment
COPY ./requirements.txt /tmp/requirements.txt
RUN python -m venv /py && \
    /py/bin/pip install --upgrade pip setuptools wheel && \
    /py/bin/pip install -r /tmp/requirements.txt && \
    rm -rf /tmp

# Set correct ownership and permissions for the migrations directories
RUN chown -R whgadmin:root /py/lib/python3.10/site-packages/captcha/migrations/ /py/lib/python3.10/site-packages/guardian/migrations/

# Copy and set up scripts
COPY ./compose/local/django/entrypoint.sh /entrypoint
COPY ./compose/production/django/start-prod.sh /start
COPY ./compose/local/django/start-livereload.sh /start-livereload
COPY ./compose/local/django/celery/worker/start.sh /start-celeryworker
COPY ./compose/local/django/celery/beat/start.sh /start-celerybeat
COPY ./compose/local/django/celery/flower/start.sh /start-flower

# Convert Windows line endings to UNIX line endings and enable execution.
RUN sed -i 's/\r$//g' /entrypoint /start /start-livereload /start-celeryworker /start-celerybeat /start-flower && \
    chmod +x /entrypoint /start /start-livereload /start-celeryworker /start-celerybeat /start-flower

WORKDIR /app

## Create debug log file
RUN mkdir -p /app/whg/logs && \
    touch /app/whg/logs/debug.log && \
    chmod 777 /app/whg/logs/debug.log

ENV PATH="/py/bin:$PATH"

USER whgadmin

ENTRYPOINT ["/entrypoint"]